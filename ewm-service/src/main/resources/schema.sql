drop table if exists users, categories, events, requests, compilations, compilations_events, comments, places;

create table if not exists users(
	id BIGINT generated by default as identity not null PRIMARY KEY,
	name VARCHAR NOT NULL,
	email VARCHAR NOT NULL unique
    );

create table if not exists categories(
	id BIGINT generated by default as identity not null PRIMARY KEY,
	name VARCHAR NOT null unique
);

create table if not exists events(
	id BIGINT generated by default as identity not null PRIMARY KEY,
	annotation text NOT null,
	category_id BIGINT NOT null,
	confirmed_requests BIGINT NOT null,
	created_on timestamp not null,
	description text,
	event_date timestamp not null,
	user_id BIGINT NOT null,
    location_lat float8 not null,
    location_lon float8 not null,
	paid boolean not null,
	participant_limit integer not null,
	request_moderation boolean not null,
	published_on timestamp,
	state varchar not null,
	title varchar not null,
	CONSTRAINT fk_events_user_id FOREIGN KEY(user_id)
    REFERENCES users(id) ON DELETE CASCADE,
	CONSTRAINT fk_events_category_id FOREIGN KEY(category_id)
    REFERENCES categories(id) ON DELETE CASCADE
);

create table if not exists requests(
    id BIGINT generated by default as identity not null PRIMARY KEY,
    created timestamp not null,
    event_id BIGINT NOT null,
    user_id BIGINT NOT null,
    status varchar not null,
    unique(event_id, user_id),
    CONSTRAINT fk_requests_event_id FOREIGN KEY(event_id)
    REFERENCES events(id) ON DELETE CASCADE,
    CONSTRAINT fk_request_user_id FOREIGN KEY(user_id)
    REFERENCES users(id) ON DELETE CASCADE
);
create table if not exists compilations(
  id BIGINT generated by default as identity not null PRIMARY KEY,
  pinned boolean not null,
  title varchar not null unique
);
create table if not exists compilations_events(
  id BIGINT generated by default as identity not null PRIMARY KEY,
  compilation_id BIGINT not null,
  event_id BIGINT not null,
  CONSTRAINT fk_compil_events_compilation_id FOREIGN KEY(compilation_id)
  REFERENCES compilations(id) ON DELETE CASCADE,
  CONSTRAINT fk_compil_events_event_id FOREIGN KEY(event_id)
  REFERENCES events(id) ON DELETE CASCADE
);
create table if not exists comments
(
    id         BIGINT generated by default as identity not null PRIMARY KEY,
    user_id    BIGINT                                  NOT null,
    text       varchar                                 not null,
    event_id   BIGINT                                  not null,
    created_on timestamp                               not null,
    unique (user_id, event_id, text),
    CONSTRAINT fk_comments_user_id FOREIGN KEY (user_id)
        REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_comments_event_id FOREIGN KEY (event_id)
        REFERENCES events (id) ON DELETE CASCADE
);

create table if not exists places(
    id bigint generated by default as identity not null primary key,
    name varchar not null,
    latitude float8 not null,
    longitude float8 not null,
    radius integer not null,
    unique(name, latitude, longitude, radius)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;